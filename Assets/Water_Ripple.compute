// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> NState; // final state
RWTexture2D<float4> NminusState; // previous
RWTexture2D<float4> NplusState; // next
int2 resolution;
float3 centerEffect;
float dispersion;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float ns_ij = NState[id.xy].x; // value of current pixel
    float nm1s_ij = NminusState[id.xy].x;
    float ns_ip1j = NState[id.xy + uint2(1, 0)].x; // the value of the neighboring pixel of the current pixel
    float ns_ijp1 = NState[id.xy + uint2(0, 1)].x;
    float ns_im1j = NState[id.xy - uint2(1, 0)].x;
    float ns_ijm1 = NState[id.xy - uint2(0, 1)].x;
    float newRippleHeight = ns_ij * 2 - nm1s_ij + 0.25 * (ns_ip1j + ns_ijp1 + ns_im1j + ns_ijm1 - 4 * ns_ij);
    newRippleHeight = newRippleHeight * dispersion;

    if (id.x == floor(centerEffect.x) && id.y == floor(centerEffect.y)) newRippleHeight = centerEffect.z; // floor convert to the nearest integer

    NplusState[id.xy] = float4(newRippleHeight, newRippleHeight, newRippleHeight, 1);
}
